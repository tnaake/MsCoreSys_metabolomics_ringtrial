---
title: "02_qc_metrics"
author:
    - Thomas Naake^[PHysikalisch-Technische Bundesanstalt, Bundesallee 100, 38116 Braunschweig, Germany]
fig_width: 15
fig_height: 10
fontsize: 12pt
output:
  html_document:
    toc: true
    toc_depth: 3
    toc_float: TRUE
    theme: united
    number_sections: true
    highlight: tango
---

```{r env, include=FALSE, echo=FALSE, cache=FALSE}
suppressPackageStartupMessages(library("MsQuality"))
suppressPackageStartupMessages(library("Spectra"))
knitr::opts_knit$set(root.dir = "~/Documents/GitHub/MsCoreSys_metabolomics_ringtrial")
```

# Create Spectra object

Get all mzML files.
```{r}
## lab_Bindila
bindila_metab_neg <- list.files(
    "data/lab_Bindila/AG_Bindila_MSCoreSys_ringtrial_Negative_mode_QC_Raw_file_280425/mzML/",
    pattern = "[.]mzML", full.names = TRUE)
bindila_metab_neg_mzML <- list.files(
    "data/lab_Bindila/AG_Bindila_MSCoreSys_ringtrial_Negative_mode_QC_Raw_files_mzML/",
    pattern = "[.]mzML", full.names = TRUE)
bindila_metab_pos <- list.files(
    "data/lab_Bindila/AG_Bindila_MSCoreSys_ringtrial_Positive_mode_QC_Raw_file_280425/mzML/",
    pattern = "[.]mzML", full.names = TRUE)
bindila_metab_pos_mzML <- list.files(
    "data/lab_Bindila/AG_Bindila_MSCoreSys_ringtrial_Positive_mode_QC_Raw_files_mzML/",
    pattern = "[.]mzML", full.names = TRUE)

## lab_Hopf
hopf_lipid_neg <- list.files(
    "data/lab_Hopf/Hopf_lipidomic_neg/final/mzML/",
    pattern = "[.]mzML", full.names = TRUE)
hopf_lipid_pos <- list.files(
    "data/lab_Hopf/Hopf_lipidomic_pos/final/mzML/",
    pattern = "[.]mzML", full.names = TRUE)
hopf_metab_neg <- list.files(
    "data/lab_Hopf/Hopf_small_metabolites_pos_neg/neg/mzML/",
    pattern = "[.]mzML", full.names = TRUE)
hopf_metab_pos <- list.files(
    "data/lab_Hopf/Hopf_small_metabolites_pos_neg/pos/mzML/",
    pattern = "[.]mzML", full.names = TRUE)

## lab_Poschet
poschet_metab <- list.files(
    "data/lab_Poschet//mzML/",
    pattern = "[.]mzML", full.names = TRUE)

## lab_Schmidlin
schmidlin_metab_wiff <- list.files(
    "data/lab_Schmidlin/mzML_from_wiff/",
    pattern = "[.]mzML", full.names = TRUE)
schmidlin_metab_wiff2 <- list.files(
    "data/lab_Schmidlin/mzML_from_wiff2/",
    pattern = "[.]mzML", full.names = TRUE)
```

Create `Spectra` object.

```{r}
all_mzML_files <- c(
    ## lab_Bindila
    bindila_metab_neg, 
    bindila_metab_pos, 
    ## do not load the mzML files p
    ##bindila_metab_neg_mzML, 
    ##bindila_metab_pos_mzML,

    ## lab_Hopf
    hopf_lipid_neg, hopf_lipid_pos, hopf_metab_neg, hopf_metab_pos,
    
    ## lab_Poschet
    poschet_metab,

    ## lab_Schmidlin
    schmidlin_metab_wiff, schmidlin_metab_wiff2
)
sps <- Spectra(all_mzML_files[-10], backend = MsBackendMzR(), BPPARAM = SerialParam())


## lab_Poschet
# poschet_metab <- poschet_metab[1]
# 
# be <- backendInitialize(ChromBackendMzR(),
#     files = poschet_metab,
#     BPPARAM = SerialParam()
# )
# 
# chrom <- Chromatograms(be)
# productMz_chrom <- sort(unique(productMz(chrom)))
# precursorMz_chrom <- sort(unique(precursorMz(chrom)))
# chrom$rtime ## 55-1627 events per entry
# 
# sps <- Spectra(poschet_metab, backend = MsBackendMzR(), BPPARAM = SerialParam())
# intensity(chrom[67094,])
# chrom <- chrom[1:10,]
# chrom$precursorMz
```

# Calculate Metrics

```{r}
qM_msLevel1 <- calculateMetrics(object = sps, 
    change = "jump", relativeTo = "Q1", msLevel = 1)
qM_msLevel2 <- calculateMetrics(object = sps, 
    change = "jump", relativeTo = "Q1", msLevel = 2)
``` 

Save the data.

```{r}
saveRDS(sps, file = "data/sps.RDS")
saveRDS(qM_msLevel1, file = "data/qM_msLevel1.RDS")
saveRDS(qM_msLevel2, file = "data/qM_msLevel2.RDS")
```

Add information on the lab in the `lab` column.

```{r}
## qM_msLevel1
qM_msLevel1<- qM_msLevel1 |>
    as.data.frame()
qM_msLevel1[["lab"]] <- NA
qM_msLevel1[["lab"]] <- ifelse(
    test = grepl(rownames(qM_msLevel1), pattern = "lab_Bindila"), 
    yes = "lab_Bindila", no = qM_msLevel1[["lab"]])
qM_msLevel1[["lab"]] <- ifelse(
    test = grepl(rownames(qM_msLevel1), pattern = "lab_Hopf"), 
    yes = "lab_Hopf", no = qM_msLevel1[["lab"]])
qM_msLevel1[["lab"]] <- ifelse(
    test = grepl(rownames(qM_msLevel1), pattern = "lab_Poschet"), 
    yes = "lab_Poschet", no = qM_msLevel1[["lab"]])
qM_msLevel1[["lab"]] <- ifelse(
    test = grepl(rownames(qM_msLevel1), pattern = "lab_Schmidlin"), 
    yes = "lab_Schmidlin", no = qM_msLevel1[["lab"]])

## qM_msLevel2
qM_msLevel2 <- qM_msLevel2 |>
    as.data.frame()
qM_msLevel2[["lab"]] <- qM_msLevel1[["lab"]]
```

Add information on ionization mode in the `ionization_column`.

```{r}
qM_msLevel1[["ionization_mode"]] <- NA

## lab_Bindila
qM_msLevel1[["ionization_mode"]] <- ifelse(
    test = qM_msLevel1[["lab"]] == "lab_Bindila" & grepl(rownames(qM_msLevel1), pattern = "Negative_mode"),
    yes = "neg", no = qM_msLevel1[["ionization_mode"]])
qM_msLevel1[["ionization_mode"]] <- ifelse(
    test = qM_msLevel1[["lab"]] == "lab_Bindila" & grepl(rownames(qM_msLevel1), pattern = "Positive_mode"),
    yes = "pos", no = qM_msLevel1[["ionization_mode"]])

## lab_Hopf
qM_msLevel1[["ionization_mode"]] <- ifelse(
    test = qM_msLevel1[["lab"]] == "lab_Hopf" & grepl(rownames(qM_msLevel1), pattern = "lipidomic_neg"),
    yes = "neg", no = qM_msLevel1[["ionization_mode"]])
qM_msLevel1[["ionization_mode"]] <- ifelse(
    test = qM_msLevel1[["lab"]] == "lab_Hopf" & grepl(rownames(qM_msLevel1), pattern = "lipidomic_pos"),
    yes = "pos", no = qM_msLevel1[["ionization_mode"]])
qM_msLevel1[["ionization_mode"]] <- ifelse(
    test = qM_msLevel1[["lab"]] == "lab_Hopf" & grepl(rownames(qM_msLevel1), pattern = "small_metabolites_pos_neg/neg"),
    yes = "neg", no = qM_msLevel1[["ionization_mode"]])
qM_msLevel1[["ionization_mode"]] <- ifelse(
    test = qM_msLevel1[["lab"]] == "lab_Hopf" & grepl(rownames(qM_msLevel1), pattern = "small_metabolites_pos_neg/pos"),
    yes = "pos", no = qM_msLevel1[["ionization_mode"]])

## lab_Poschet
qM_msLevel1[["ionization_mode"]] <- ifelse(
    test = qM_msLevel1[["lab"]] == "lab_Poschet", yes = "pos", no = qM_msLevel1[["ionization_mode"]])

## lab_Schmidlin
qM_msLevel1[["ionization_mode"]] <- ifelse(
    test = qM_msLevel1[["lab"]] == "lab_Schmidlin", yes = "pos", no = qM_msLevel1[["ionization_mode"]])

## qM_msLevel2
qM_msLevel2[["ionization_mode"]] <- qM_msLevel1[["ionization_mode"]] 
```

Add information on sample type.

```{r}
qM_msLevel1[["sample_type"]] <- NA

## lab_Bindila
"pQC" = "pooled_QC"

## lab_Hopf
"Ctl" = "Ctl"
"KA" = "KA"
"NIST" = "NIST"
"pooled_QC_diluted" = "pooled_QC_diluted"
"pooled_QC_undiluted" = "pooled_QC_undiluted"
"processed_blank" = "processed_blank"
"solvent_blank" = "solvent_blank"
"water_blank" = "water_blank"
"_KA" = "KA" ##? ## small_metabolites
"_C" = "Ctl" ##?
"PooledQC" = "pooled_QC"
"ProcessingBlank" = "processed_blank"

## lab_Poschet

```

Truncate file names.

```{r}
## truncate file names
rownames(qM_msLevel1) <- lapply(
    strsplit(rownames(qM_msLevel1), split = "data/"), "[", 2) |>
    unlist()
rownames(qM_msLevel2) <- lapply(
    strsplit(rownames(qM_msLevel2), split = "data/"), "[", 2) |>
    unlist()

## remove .mzML file ending
rownames(qM_msLevel1) <- stringr::str_remove(rownames(qM_msLevel1), 
    pattern = "[.]mzML$")
rownames(qM_msLevel2) <- stringr::str_remove(rownames(qM_msLevel2), 
    pattern = "[.]mzML$")

## remove lab specific strings
## lab_Bindila
rownames(qM_msLevel1) <- stringr::str_remove(string = rownames(qM_msLevel1), 
    pattern = "lab_Bindila/")
rownames(qM_msLevel2) <- stringr::str_remove(string = rownames(qM_msLevel2), 
    pattern = "lab_Bindila/")

## lab_Hopf
rownames(qM_msLevel1) <- stringr::str_remove(string = rownames(qM_msLevel1), 
    pattern = "lab_Hopf/Hopf_lipidomic_neg/final/mzML/")
rownames(qM_msLevel2) <- stringr::str_remove(string = rownames(qM_msLevel2), 
    pattern = "lab_Hopf/Hopf_lipidomic_neg/final/mzML/")
rownames(qM_msLevel1) <- stringr::str_remove(string = rownames(qM_msLevel1), 
    pattern = "lab_Hopf/Hopf_lipidomic_pos/final/mzML/")
rownames(qM_msLevel2) <- stringr::str_remove(string = rownames(qM_msLevel2), 
    pattern = "lab_Hopf/Hopf_lipidomic_pos/final/mzML/")
rownames(qM_msLevel1) <- stringr::str_remove(string = rownames(qM_msLevel1), 
    pattern = "lab_Hopf/Hopf_small_metabolites_pos_neg/neg/mzML/")
rownames(qM_msLevel2) <- stringr::str_remove(string = rownames(qM_msLevel2), 
    pattern = "lab_Hopf/Hopf_small_metabolites_pos_neg/neg/mzML/")
rownames(qM_msLevel1) <- stringr::str_remove(string = rownames(qM_msLevel1), 
    pattern = "lab_Hopf/Hopf_small_metabolites_pos_neg/pos/mzML/")
rownames(qM_msLevel2) <- stringr::str_remove(string = rownames(qM_msLevel2), 
    pattern = "lab_Hopf/Hopf_small_metabolites_pos_neg/pos/mzML/")

## lab_Poschet
rownames(qM_msLevel1) <- stringr::str_remove(string = rownames(qM_msLevel1), 
    pattern = "lab_Poschet/mzML/")
rownames(qM_msLevel2) <- stringr::str_remove(string = rownames(qM_msLevel2), 
    pattern = "lab_Poschet/mzML/")

## lab_Schmidlin
rownames(qM_msLevel1) <- stringr::str_remove(string = rownames(qM_msLevel1), 
    pattern = "lab_Schmidlin/mzML_from_wiff/")
rownames(qM_msLevel2) <- stringr::str_remove(string = rownames(qM_msLevel2), 
    pattern = "lab_Schmidlin/mzML_from_wiff/")
rownames(qM_msLevel1) <- ifelse(
    grepl(rownames(qM_msLevel1), pattern = "lab_Schmidlin/mzML_from_wiff2"),
    paste(rownames(qM_msLevel1), "_wiff2", sep = ""), rownames(qM_msLevel1))
rownames(qM_msLevel2) <- ifelse(
    grepl(rownames(qM_msLevel2), pattern = "lab_Schmidlin/mzML_from_wiff2"),
    paste(rownames(qM_msLevel2), "_wiff2", sep = ""), rownames(qM_msLevel2))
rownames(qM_msLevel1) <- stringr::str_remove(string = rownames(qM_msLevel1), 
    pattern = "lab_Schmidlin/mzML_from_wiff2/")
rownames(qM_msLevel2) <- stringr::str_remove(string = rownames(qM_msLevel2), 
    pattern = "lab_Schmidlin/mzML_from_wiff2/")
```

# Plot the metrics

```{r}
#plotMetric(qM_msLevel1, metric = "areaUnderTic", plotly = FALSE) +
    #facet_grid(~ qM_msLevel1$lab + qM_msLevel1$ionization_mode, 5) +
    #facet_grid(~ rep(qM_msLevel1$lab, 5) + rep(qM_msLevel1$ionization_mode, 5), scales = c("free_x", "free_y")) + 
    #theme(axis.text.x=element_blank())

qM_msLevel1 |>
    dplyr::filter(lab == "lab_Bindila") |>
    plotMetric(metric = "areaUnderTic", plotly = FALSE) +
        theme(axis.text.x=element_blank())
qM_msLevel1 |>
    dplyr::filter(lab == "lab_Hopf") |>
    plotMetric(metric = "areaUnderTic", plotly = FALSE) +
        theme(axis.text.x=element_blank())
qM_msLevel1 |>
    dplyr::filter(lab == "lab_Poschet") |>
    plotMetric(metric = "areaUnderTic", plotly = FALSE) +
        theme(axis.text.x=element_blank())
qM_msLevel1 |>
    dplyr::filter(lab == "lab_Schmidlin") |>
    plotMetric(metric = "areaUnderTic", plotly = FALSE) +
        theme(axis.text.x=element_blank())
``` 


